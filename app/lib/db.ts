import { RowDataPacket, ResultSetHeader } from 'mysql2/promise'; const query = <T extends RowDataPacket[]>(sql: string, params?: any[]): Promise<T> => { return Promise.resolve([] as unknown as T); }; const execute = (sql: string, params?: any[]): Promise<ResultSetHeader> => { return Promise.resolve({ affectedRows: 0, insertId: 0, warningStatus: 0, fieldCount: 0, info: '', serverStatus: 0, changedRows: 0 } as ResultSetHeader); }; const insert = (table: string, data: Record<string, any>): Promise<ResultSetHeader> => { return Promise.resolve({ affectedRows: 0, insertId: 0, warningStatus: 0, fieldCount: 0, info: '', serverStatus: 0, changedRows: 0 } as ResultSetHeader); }; const update = (table: string, data: Record<string, any>, whereClause: string, whereParams: any[]): Promise<ResultSetHeader> => { return Promise.resolve({ affectedRows: 0, insertId: 0, warningStatus: 0, fieldCount: 0, info: '', serverStatus: 0, changedRows: 0 } as ResultSetHeader); }; const transaction = <T>(callback: any): Promise<T> => { return Promise.resolve({} as T); }; const testConnection = () => Promise.resolve(true); const initDatabase = () => Promise.resolve(true); const pool = {}; const db = { query, execute, insert, update, transaction, testConnection, initDatabase, pool }; export default db;
